events {
    worker_connections 1024;
}

http {
    upstream api_backend {
        # Load balance across 3 API instances
        server api1:3001 weight=1 max_fails=3 fail_timeout=30s;
        server api2:3002 weight=1 max_fails=3 fail_timeout=30s;
        server api3:3003 weight=1 max_fails=3 fail_timeout=30s;
        
        # Use IP hash for session affinity if needed
        # ip_hash;
    }
    
    upstream cluster_api {
        # Dedicated upstream for cluster management (round-robin)
        server api1:3001;
        server api2:3002;
        server api3:3003;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=cluster:10m rate=30r/m;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_types application/json text/css application/javascript;

    server {
        listen 80;
        server_name localhost;

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Cluster management API (no load balancing needed, any instance works)
        location /api/cluster/ {
            limit_req zone=cluster burst=10 nodelay;
            
            proxy_pass http://cluster_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Don't buffer for real-time responses
            proxy_buffering off;
        }

        # Main API endpoints (load balanced)
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Enable keepalive
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }

        # Health check endpoint (load balanced)
        location /health {
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Quick health checks
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Root endpoint info
        location = / {
            return 200 '{"service":"MongoDB CRUD API","instances":3,"load_balancer":"nginx","endpoints":["/api/db","/api/management","/api/webhooks","/api/scripts","/api/sdk","/api/cluster"],"health":"/health"}';
            add_header Content-Type application/json;
        }

        # Default fallback
        location / {
            return 404 '{"error":"Not Found","message":"Use /api/* endpoints"}';
            add_header Content-Type application/json;
        }
    }
}
