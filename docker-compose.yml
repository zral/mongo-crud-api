services:
  # Redis for distributed coordination
  redis:
    image: redis:7-alpine
    container_name: mongo-crud-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crud_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MongoDB Database
  mongo:
    image: mongo:7
    container_name: mongo-crud-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_DATABASE: crud_api
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - crud_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Instance 1
  api1:
    build: .
    container_name: mongo-crud-api-1
    restart: unless-stopped
    environment:
      PORT: 3001
      MONGODB_URI: mongodb://mongo:27017/crud_api
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:3004
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
      WEBHOOK_QUEUE_DELAY: 1000
      WEBHOOK_ATTEMPTS: 3
      WEBHOOK_BACKOFF_DELAY: 30000
      SCRIPT_TIMEOUT: 60000
      CLUSTER_ENABLED: true
      INSTANCE_ID: api-1
      CRON_ENABLED: true
      OPENAPI_BASE_URL: http://localhost:8080
    ports:
      - "3001:3001"
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
    networks:
      - crud_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Instance 2
  api2:
    build: .
    container_name: mongo-crud-api-2
    restart: unless-stopped
    environment:
      PORT: 3002
      MONGODB_URI: mongodb://mongo:27017/crud_api
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:3004
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
      WEBHOOK_QUEUE_DELAY: 1000
      WEBHOOK_ATTEMPTS: 3
      WEBHOOK_BACKOFF_DELAY: 30000
      SCRIPT_TIMEOUT: 60000
      CLUSTER_ENABLED: true
      INSTANCE_ID: api-2
      CRON_ENABLED: false
      OPENAPI_BASE_URL: http://localhost:8080
    ports:
      - "3002:3002"
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
    networks:
      - crud_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # API Instance 3
  api3:
    build: .
    container_name: mongo-crud-api-3
    restart: unless-stopped
    environment:
      PORT: 3003
      MONGODB_URI: mongodb://mongo:27017/crud_api
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:3004
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
      WEBHOOK_QUEUE_DELAY: 1000
      WEBHOOK_ATTEMPTS: 3
      WEBHOOK_BACKOFF_DELAY: 30000
      SCRIPT_TIMEOUT: 60000
      CLUSTER_ENABLED: true
      INSTANCE_ID: api-3
      CRON_ENABLED: false
      OPENAPI_BASE_URL: http://localhost:8080
    ports:
      - "3003:3003"
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
    networks:
      - crud_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: mongo-crud-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      api1:
        condition: service_healthy
      api2:
        condition: service_healthy
      api3:
        condition: service_healthy
    networks:
      - crud_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:80/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # React Frontend Application
  frontend:
    build: ./frontend
    container_name: mongo-crud-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8080
    ports:
      - "3004:3000"
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - crud_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  crud_network:
    driver: bridge

volumes:
  mongo_data:
  redis_data:
